// method 1: DP:

class Solution {
    public int numDecodings(String s) {
        if(s == null || s.length() == 0) return 0;
        int len = s.length();
        int[] dp = new int[len+1];
        dp[0] = 1;
        dp[1]=s.charAt(0) != '0' ? 1:0;
        for(int i=2; i<=len; i++) {
            int first = s.charAt(i-1)-'0';
            int second = 10 * (s.charAt(i-2)-'0') + first;
            if(first >= 1 && first <= 9)
                dp[i] += dp[i-1];
            if(second >= 10 && second <= 26)
                dp[i] += dp[i-2];
        }
        return dp[len];
    }
}

// time: O(n)
// space: O(n)


class Solution {
    public int numDecodings(String s) {
        if(s == null || s.length() == 0) return 0;
        int m1 = 1, m2 = 0;
        if(s.charAt(0) > '0' && s.charAt(0) <= '9')
            m2 = 1;
        for(int i=1; i<s.length(); i++) {
            int sum = 0;
            char c = s.charAt(i);
            if(c > '0' && c <= '9')
                sum += m2;
            char prev = s.charAt(i-1);
            int val = (prev - '0') * 10 + (c-'0');
            if(val >= 10 && val <= 26)
                sum += m1;
            m1 = m2;
            m2 = sum;
        }
        return m2;
    }
}

// time: O(n);
// space: O(1);
