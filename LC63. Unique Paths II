class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if(obstacleGrid == null || obstacleGrid[0] == null 
           || obstacleGrid[0] == null || obstacleGrid[0].length == 0)
            return 0;
        int row = obstacleGrid.length, col = obstacleGrid[0].length;
        int[][] m = new int[row+1][col+1];
        
        for(int i=1; i<=row; i++) {
            for(int j=1; j<=col; j++) {
                if(obstacleGrid[i-1][j-1] == 1) {
                    m[i][j] = 0;
                } else {
                    if(i == 1 && j == 1) {
                        m[i][j] = 1;
                    } else {
                        m[i][j] = m[i-1][j] + m[i][j-1];
                    }
                }
            }
        }
        return m[row][col];
    }
}


// method 2:

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if(obstacleGrid == null) return 0;
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        if(m==0 && n==0) return 0;
        int[][] dp = new int[m][n];
        
        for(int i=0; i<m; i++) {
            if(obstacleGrid[i][0] == 1) break;
            dp[i][0] = 1;
        }
        for(int j=0; j<n; j++) {
            if(obstacleGrid[0][j] == 1) break;
            dp[0][j] = 1;
        }
        for(int i=1; i<m; i++) {
            for(int j=1; j<n; j++) {
                if(obstacleGrid[i][j] == 1) continue;
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
}


// time: O(m*n)
// space: O(n)

